# Doc & Github Ref [as per the doc schema store with graphqls not with graphql]
# Postman use the graphql not the graphqls
# https://graphql.org/learn/schema/#object-types-and-fields [use for create the graphql]
# https://github.com/Amit-Chavda/todo-app-grapql [use for graphql custom scalar in java]
# https://github.com/rrohitramsen/ems [use for ems]
scalar LocalDate
scalar LocalDateTime

enum Role {
    USER
    ADMIN
}

# Enums
enum Format {
    HARD_COVER
    PAPER_BACK
    EBOOK
}

enum Language {
    ENGLISH
    SPANISH
    ARABIC
}

enum Category {
    FICTION
    NO_FICTION
    MYSTERY
    SCIENCE_FICTION
}

enum Status {
    INACTIVE
    ACTIVE
    DELETE
}

# Custom Enum Types
type GFormat {
    code: Int!
    name: String!
    value: Format!
}

type GLanguage {
    code: Int!
    name: String!
    value: Language!
}

type GCategory {
    code: Int!
    name: String!
    value: Category!
}

type GStatus {
    code: Int!
    name: String!
    value: Status!
}

# BaseEntity Interface
interface BaseEntity {
    id: ID!
    createdAt: LocalDateTime!
    updatedAt: LocalDateTime!
    status: GStatus!
}

# Response Union
union DATA =
    AuthorResponse |
    AuthorListResponse |
    BookResponse |
    BookListResponse |
    TokenResponse

# Response Type
type GQLResponse {
    message: String!
    status: String!
    data: DATA
}

# Author Response Type
type AuthorResponse implements BaseEntity {
    id: ID!
    firstName: String
    lastName: String!
    email: String!
    role: Role!
    username: String!
    biography: String
    nationality: String!
    expertise: String
    image: String
    books: [BookResponse]!
    createdAt: LocalDateTime!
    updatedAt: LocalDateTime!
    status: GStatus!
}

type AuthorListResponse {
    authors: [AuthorResponse]!
}

# Book Response Type
type BookResponse implements BaseEntity {
    id: ID!
    isbn: String!
    title: String!
    price: Float!
    publisher: String!
    publication: LocalDate!
    language: GLanguage!
    category: GCategory!
    format: GFormat!
    description: String!
    coverImg: String!
    bookUrl: String!
    note: String
    author: AuthorResponse!
    createdAt: LocalDateTime!
    updatedAt: LocalDateTime!
    status: GStatus!
}

type BookListResponse {
    books: [BookResponse]!
}

type TokenResponse {
    firstName: String!
    lastName: String!
    email: String!
    username: String!
    role: Role!
    image: String!
    token: String!
}

# Input Types
input BookRequest {
    id: ID
    isbn: String
    title: String
    price: Float
    publisher: String
    publication: LocalDate
    language: Language
    category: Category
    format: Format
    description: String
    note: String
    author: AuthorRequest
    status: Status
}

input AuthorRequest {
    id: ID
    firstName: String
    lastName: String
    email: String
    password: String
    role: Role
    username: String
    biography: String
    nationality: String
    expertise: String
    status: Status
}

input AuthRequest {
    username: String!
    password: String!
}

input RestPass {
    username: String!
    newPassword: String!
}

# Mutation API
type Mutation {
    # public api
    getToken(payload: AuthRequest!): GQLResponse!
    forgotPassword(username: String!): GQLResponse!
    restPassword(payload: RestPass!): GQLResponse!
    # register
    createAuthor(payload: AuthorRequest!): GQLResponse
    # secure api
    updateAuthor(payload: AuthorRequest!): GQLResponse
    deleteAuthor(id: ID!): GQLResponse
    createBook(payload: BookRequest!): GQLResponse
    updateBook(payload: BookRequest!): GQLResponse
    deleteBook(id: ID!): GQLResponse
}

# Query API
type Query {
    # secure GQL only access after login
    getAuthor(id: ID!): GQLResponse
    getAllAuthors: GQLResponse
    getBook(id: ID!): GQLResponse
    getAllBooks: GQLResponse
    # public GQL
    fetchPublicBooks: GQLResponse
    fetchPublicAuthors: GQLResponse
}

# Schema Entry Point
schema {
    query: Query
    mutation: Mutation
}